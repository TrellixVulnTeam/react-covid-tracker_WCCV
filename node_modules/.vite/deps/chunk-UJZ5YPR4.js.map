{
  "version": 3,
  "sources": ["../../grommet-styles/es6/utils/colors.js", "../../grommet-styles/es6/utils/index.js", "../../grommet-styles/es6/styles/color.js", "../../grommet-styles/es6/styles/size.js", "../../grommet-styles/es6/styles/index.js", "../../grommet-styles/es6/index.js"],
  "sourcesContent": ["// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nvar parseHexToRGB = function parseHexToRGB(color) {\n  return color.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b) {\n    return \"#\" + r + r + g + g + b + b;\n  }).substring(1).match(/.{2}/g).map(function (x) {\n    return parseInt(x, 16);\n  });\n};\n\nvar getRGBArray = function getRGBArray(color) {\n  if (/^#/.test(color)) {\n    return parseHexToRGB(color);\n  }\n\n  if (/^rgb/.test(color)) {\n    return color.match(/rgba?\\((\\s?[0-9]*\\s?),(\\s?[0-9]*\\s?),(\\s?[0-9]*\\s?).*?\\)/).splice(1);\n  }\n\n  return color;\n};\n\nexport var colorIsDark = function colorIsDark(color) {\n  var _getRGBArray = getRGBArray(color),\n      red = _getRGBArray[0],\n      green = _getRGBArray[1],\n      blue = _getRGBArray[2]; // http://www.had2know.com/technology/\n  //  color-contrast-calculator-web-design.html\n\n\n  var brightness = (299 * red + 587 * green + 114 * blue) / 1000;\n  return brightness < 125;\n};\nexport var normalizeColor = function normalizeColor(color, theme) {\n  var colorSpec = theme.global.colors[color] || color; // If the color has a light or dark object, use that\n\n  var result = colorSpec;\n\n  if (theme.dark && colorSpec.dark) {\n    result = colorSpec.dark;\n  } else if (!theme.dark && colorSpec.light) {\n    result = colorSpec.light;\n  } // allow one level of indirection in color names\n\n\n  if (result && theme.global.colors[result] && theme.global.colors[result] !== result) {\n    result = normalizeColor(result, theme);\n  }\n\n  return result;\n};", "export * from './colors';", "import { css } from 'styled-components';\nimport { normalizeColor } from '../utils';\nexport var colorStyle = function colorStyle(name, value, theme, required) {\n  return css([\"\", \":\", \";\"], name, normalizeColor(value, theme, required));\n};", "import { css } from 'styled-components';\nexport var sizeStyle = function sizeStyle(name, value, theme) {\n  return css([\"\", \":\", \";\"], name, theme.global.size[value] || value);\n};", "export * from './color';\nexport * from './size';", "export * from './styles';\nexport * from './utils';"],
  "mappings": ";;;;;;;;;;AAAA,IACI,eAQA,aAYO,aAWA;AAhCX;AAAA;AACA,IAAI,gBAAgB,SAASA,eAAc,OAAO;AAChD,aAAO,MAAM,QAAQ,oCAAoC,SAAU,GAAG,GAAG,GAAG,GAAG;AAC7E,eAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA,MACnC,CAAC,EAAE,UAAU,CAAC,EAAE,MAAM,OAAO,EAAE,IAAI,SAAU,GAAG;AAC9C,eAAO,SAAS,GAAG,EAAE;AAAA,MACvB,CAAC;AAAA,IACH;AAEA,IAAI,cAAc,SAASC,aAAY,OAAO;AAC5C,UAAI,KAAK,KAAK,KAAK,GAAG;AACpB,eAAO,cAAc,KAAK;AAAA,MAC5B;AAEA,UAAI,OAAO,KAAK,KAAK,GAAG;AACtB,eAAO,MAAM,MAAM,0DAA0D,EAAE,OAAO,CAAC;AAAA,MACzF;AAEA,aAAO;AAAA,IACT;AAEO,IAAI,cAAc,SAASC,aAAY,OAAO;AACnD,UAAI,eAAe,YAAY,KAAK,GAChC,MAAM,aAAa,IACnB,QAAQ,aAAa,IACrB,OAAO,aAAa;AAIxB,UAAI,cAAc,MAAM,MAAM,MAAM,QAAQ,MAAM,QAAQ;AAC1D,aAAO,aAAa;AAAA,IACtB;AACO,IAAI,iBAAiB,SAASC,gBAAe,OAAO,OAAO;AAChE,UAAI,YAAY,MAAM,OAAO,OAAO,UAAU;AAE9C,UAAI,SAAS;AAEb,UAAI,MAAM,QAAQ,UAAU,MAAM;AAChC,iBAAS,UAAU;AAAA,MACrB,WAAW,CAAC,MAAM,QAAQ,UAAU,OAAO;AACzC,iBAAS,UAAU;AAAA,MACrB;AAGA,UAAI,UAAU,MAAM,OAAO,OAAO,WAAW,MAAM,OAAO,OAAO,YAAY,QAAQ;AACnF,iBAASA,gBAAe,QAAQ,KAAK;AAAA,MACvC;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;;;ACjDA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAEW;AAFX;AAAA;AAAA;AACA;AACO,IAAI,aAAa,SAASC,YAAW,MAAM,OAAO,OAAO,UAAU;AACxE,aAAO,GAAI,CAAC,IAAI,KAAK,GAAG,GAAG,MAAM,eAAe,OAAO,OAAO,QAAQ,CAAC;AAAA,IACzE;AAAA;AAAA;;;ACJA,IACW;AADX;AAAA;AAAA;AACO,IAAI,YAAY,SAASC,WAAU,MAAM,OAAO,OAAO;AAC5D,aAAO,GAAI,CAAC,IAAI,KAAK,GAAG,GAAG,MAAM,MAAM,OAAO,KAAK,UAAU,KAAK;AAAA,IACpE;AAAA;AAAA;;;ACHA;AAAA;AAAA;AACA;AAAA;AAAA;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;",
  "names": ["parseHexToRGB", "getRGBArray", "colorIsDark", "normalizeColor", "colorStyle", "sizeStyle"]
}
