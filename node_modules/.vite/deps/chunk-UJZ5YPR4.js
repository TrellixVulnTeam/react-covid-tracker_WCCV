import {
  Ce,
  init_styled_components_browser_esm
} from "./chunk-DY32EK2A.js";
import {
  __esm,
  __export
} from "./chunk-UOOVSGC4.js";

// node_modules/grommet-styles/es6/utils/colors.js
var parseHexToRGB, getRGBArray, colorIsDark, normalizeColor;
var init_colors = __esm({
  "node_modules/grommet-styles/es6/utils/colors.js"() {
    parseHexToRGB = function parseHexToRGB2(color) {
      return color.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(m, r, g, b) {
        return "#" + r + r + g + g + b + b;
      }).substring(1).match(/.{2}/g).map(function(x) {
        return parseInt(x, 16);
      });
    };
    getRGBArray = function getRGBArray2(color) {
      if (/^#/.test(color)) {
        return parseHexToRGB(color);
      }
      if (/^rgb/.test(color)) {
        return color.match(/rgba?\((\s?[0-9]*\s?),(\s?[0-9]*\s?),(\s?[0-9]*\s?).*?\)/).splice(1);
      }
      return color;
    };
    colorIsDark = function colorIsDark2(color) {
      var _getRGBArray = getRGBArray(color), red = _getRGBArray[0], green = _getRGBArray[1], blue = _getRGBArray[2];
      var brightness = (299 * red + 587 * green + 114 * blue) / 1e3;
      return brightness < 125;
    };
    normalizeColor = function normalizeColor2(color, theme) {
      var colorSpec = theme.global.colors[color] || color;
      var result = colorSpec;
      if (theme.dark && colorSpec.dark) {
        result = colorSpec.dark;
      } else if (!theme.dark && colorSpec.light) {
        result = colorSpec.light;
      }
      if (result && theme.global.colors[result] && theme.global.colors[result] !== result) {
        result = normalizeColor2(result, theme);
      }
      return result;
    };
  }
});

// node_modules/grommet-styles/es6/utils/index.js
var init_utils = __esm({
  "node_modules/grommet-styles/es6/utils/index.js"() {
    init_colors();
  }
});

// node_modules/grommet-styles/es6/styles/color.js
var colorStyle;
var init_color = __esm({
  "node_modules/grommet-styles/es6/styles/color.js"() {
    init_styled_components_browser_esm();
    init_utils();
    colorStyle = function colorStyle2(name, value, theme, required) {
      return Ce(["", ":", ";"], name, normalizeColor(value, theme, required));
    };
  }
});

// node_modules/grommet-styles/es6/styles/size.js
var sizeStyle;
var init_size = __esm({
  "node_modules/grommet-styles/es6/styles/size.js"() {
    init_styled_components_browser_esm();
    sizeStyle = function sizeStyle2(name, value, theme) {
      return Ce(["", ":", ";"], name, theme.global.size[value] || value);
    };
  }
});

// node_modules/grommet-styles/es6/styles/index.js
var init_styles = __esm({
  "node_modules/grommet-styles/es6/styles/index.js"() {
    init_color();
    init_size();
  }
});

// node_modules/grommet-styles/es6/index.js
var es6_exports = {};
__export(es6_exports, {
  colorIsDark: () => colorIsDark,
  colorStyle: () => colorStyle,
  normalizeColor: () => normalizeColor,
  sizeStyle: () => sizeStyle
});
var init_es6 = __esm({
  "node_modules/grommet-styles/es6/index.js"() {
    init_styles();
    init_utils();
  }
});

export {
  colorStyle,
  es6_exports,
  init_es6
};
//# sourceMappingURL=chunk-UJZ5YPR4.js.map
